#include "midi.h"

#include <alsa/seq_event.h>
#include <array>
#include <string>

namespace {

/* error handling for ALSA functions */
void check_snd(const char *operation, int err) {
  if (err < 0) {
    printf("Cannot %s - %s\n", operation, snd_strerror(err));
    exit(1);
  }
}

} // namespace

void Midi::do_test() {
  init_seq();

  list_ports();

  create_source_port();
  create_queue();
  connect_ports();

  play_file();

  snd_seq_close(seq_);
}

void Midi::query() {
  init_seq();

  list_ports();
  snd_seq_close(seq_);
}

void Midi::init_seq() {
  /* open sequencer */
  auto err = snd_seq_open(&seq_, "default", SND_SEQ_OPEN_DUPLEX, 0);
  check_snd("open sequencer", err);

  /* set our name (otherwise it's "Client-xxx") */
  err = snd_seq_set_client_name(seq_, "aplaymidi");
  check_snd("set client name", err);

  /* find out who we actually are */
  auto client = snd_seq_client_id(seq_);
  check_snd("get client id", client);
}

void Midi::list_ports() {
  snd_seq_client_info_t *cinfo;
  snd_seq_port_info_t *pinfo;

  snd_seq_client_info_alloca(&cinfo);
  snd_seq_port_info_alloca(&pinfo);

  puts(" Port    Client name                      Port name");

  snd_seq_client_info_set_client(cinfo, -1);
  while (snd_seq_query_next_client(seq_, cinfo) >= 0) {
    int client = snd_seq_client_info_get_client(cinfo);

    snd_seq_port_info_set_client(pinfo, client);
    snd_seq_port_info_set_port(pinfo, -1);

    while (snd_seq_query_next_port(seq_, pinfo) >= 0) {
      /* port must understand MIDI messages */
      if (!(snd_seq_port_info_get_type(pinfo) &
            SND_SEQ_PORT_TYPE_MIDI_GENERIC)) {
        continue;
      }

      /* we need both WRITE and SUBS_WRITE */
      if ((snd_seq_port_info_get_capability(pinfo) &
           (SND_SEQ_PORT_CAP_WRITE | SND_SEQ_PORT_CAP_SUBS_WRITE)) !=
          (SND_SEQ_PORT_CAP_WRITE | SND_SEQ_PORT_CAP_SUBS_WRITE)) {
        continue;
      }

      printf("%3d:%-3d  %-32.32s %s\n", snd_seq_port_info_get_client(pinfo),
             snd_seq_port_info_get_port(pinfo),
             snd_seq_client_info_get_name(cinfo),
             snd_seq_port_info_get_name(pinfo));
    }
  }
}

void Midi::create_source_port() {
  snd_seq_port_info_t *pinfo{nullptr};
  int err{};

  snd_seq_port_info_alloca(&pinfo);

  /* the first created port is 0 anyway, but let's make sure ... */
  snd_seq_port_info_set_port(pinfo, 0);
  snd_seq_port_info_set_port_specified(pinfo, 1);

  snd_seq_port_info_set_name(pinfo, "aplaymidi");

  snd_seq_port_info_set_capability(pinfo, 0); /* sic */
  snd_seq_port_info_set_type(pinfo, SND_SEQ_PORT_TYPE_MIDI_GENERIC |
                                        SND_SEQ_PORT_TYPE_APPLICATION);

  err = snd_seq_create_port(seq_, pinfo);
  check_snd("create port", err);
}

void Midi::create_queue() {
  queue_ = snd_seq_alloc_named_queue(seq_, "looper");
  check_snd("create queue", queue_);
  /* the queue is now locked, which is just fine */
}

void Midi::connect_ports() {

  std::string const fluidsynth_port{"128:0"};
  // std::string const fluidsynth_port{"24:0"};

  auto err = snd_seq_parse_address(seq_, &port_, fluidsynth_port.c_str());
  check_snd("parse address", err);

  /*
   * We send MIDI events with explicit destination addresses, so we don't
   * need any connections to the playback ports.  But we connect to those
   * anyway to force any underlying RawMIDI ports to remain open while
   * we're playing - otherwise, ALSA would reset the port after every
   * event.
   */

  err = snd_seq_connect_to(seq_, 0, port_.client, port_.port);
  check_snd("connect port", err);
}

void Midi::play_file() {
  snd_seq_event_t ev;

  int max_tick = 200;

  snd_seq_queue_tempo_t *tempo;
  snd_seq_queue_tempo_alloca(&tempo);
  snd_seq_queue_tempo_set_tempo(tempo, 1000000); // 60 BPM
  snd_seq_queue_tempo_set_ppq(tempo, 48);        // 48 PPQ
  snd_seq_set_queue_tempo(seq_, queue_, tempo);

  /* common settings for all our events */
  snd_seq_ev_clear(&ev);
  ev.queue = queue_;
  ev.source.port = 0;
  ev.flags = SND_SEQ_TIME_STAMP_TICK;

  // hardcoded for now
  ev.dest = port_;
  ev.data.note.channel = 1;

  int err = snd_seq_start_queue(seq_, queue_, NULL);
  check_snd("start queue", err);

  // start "loop"
  // questions:
  // - feedback from sequencer, e.g. signal every n-th tick
  // - tick overflow

  std::array<unsigned char, 17> notes{50, 52, 54, 55, 57, 59, 61, 62, 64,
                                      54, 57, 61, 57, 54, 57, 61, 57};

  snd_seq_tick_time_t tick = 0;

  // set instrument
  ev.type = SND_SEQ_EVENT_PGMCHANGE;
  ev.time.tick = tick;
  snd_seq_ev_set_fixed(&ev);
  ev.data.control.value = 18;
  err = snd_seq_event_output(seq_, &ev);
  check_snd("output event", err);

  for (auto const note : notes) {
    ev.type = SND_SEQ_EVENT_NOTEON;
    ev.time.tick = tick;
    snd_seq_ev_set_fixed(&ev);
    ev.data.note.note = note;
    ev.data.note.velocity = 127;

    err = snd_seq_event_output(seq_, &ev);
    check_snd("output event", err);

    tick += 10;

    ev.time.tick = tick;
    ev.type = SND_SEQ_EVENT_NOTEOFF;
    snd_seq_ev_set_fixed(&ev);
    ev.data.note.note = note;
    ev.data.note.velocity = 0;

    err = snd_seq_event_output(seq_, &ev);
    check_snd("output event", err);

    tick++;
  }

  // end "loop"

  /* schedule queue stop at end of song */
  snd_seq_ev_set_fixed(&ev);
  ev.type = SND_SEQ_EVENT_STOP;
  ev.time.tick = max_tick;
  ev.dest.client = SND_SEQ_CLIENT_SYSTEM;
  ev.dest.port = SND_SEQ_PORT_SYSTEM_TIMER;
  ev.data.queue.queue = queue_;
  err = snd_seq_event_output(seq_, &ev);
  check_snd("output event", err);

  /* make sure that the sequencer sees all our events */
  err = snd_seq_drain_output(seq_);
  check_snd("drain output", err);

  err = snd_seq_sync_output_queue(seq_);
  check_snd("sync output", err);
}
